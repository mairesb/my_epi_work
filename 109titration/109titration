#!/usr/bin/env php
<?php
function error($msg)
{
	exit(84);
}

if (count($argv) != 2)
	error("2 parameters required\n");

if ($argv[1] == "-h")
{
	echo "USAGE\n\t./109titration file\n\nDESCRIPTION\n\tfile\t a csv file containing \"vol;ph\"lines\n";
	exit(0);
}
	if (!file_exists($argv[1]))
	error("toto\n");
$value = file($argv[1]);
if ($value == FALSE)
	error("file don't exist\n");
foreach ($value as $key => $nbr)
{
	if (count($tab_number[$key] = explode(";", $nbr)) == 2)
	{
		if (!preg_match("#^[0-9.]+;[0-9.]+$#", $nbr))
			error("invalid number\n");
	}
	else
	error("tata\n");
}
$i = 1;
echo "Derivative:\n";
while ($i < count($tab_number) - 1)
{
	if ($tab_number[$i + 1][0] - $tab_number[$i - 1][0] == 0)
		exit(84);
	$tab_number[$i][2] = ($tab_number[$i + 1][1] - $tab_number[$i - 1][1]) / ($tab_number[$i + 1][0] - $tab_number[$i - 1][0]);
	printf("volume: %g ml -> %.2f\n", $tab_number[$i][0], $tab_number[$i][2]);
	$i++;
}
$titi = $tab_number[1];
foreach ($tab_number as $key => $value)
{
	if ($key != 0 && $key != count($tab_number) - 1 && $value[2] > $titi[2])
		$titi = $value;
}

$toto = [$tab_number[0][0], $tab_number[0][0], $tab_number[0][0], 2];
printf("\nEquivalent point at %.2g ml\n\n", $titi[0]);
$i = 2;
echo "Second derivative\n";
while ($i < count($tab_number) - 2)
{
	if ($tab_number[$i + 1][0] - $tab_number[$i - 1][0] == 0)
		exit(84);
	$tab_number[$i][3] = ($tab_number[$i + 1][2] - $tab_number[$i - 1][2]) / ($tab_number[$i + 1][0] - $tab_number[$i - 1][0]);
	printf("volume: %g ml -> %.2f\n", $tab_number[$i][0], $tab_number[$i][3]);
	if ($i > 2 && array_key_exists(3, $tab_number[$i - 1]) && array_key_exists(3, $tab_number[$i]) && $tab_number[$i - 1][3] > 0 && $tab_number[$i][3] < 0)
	{
		$toto[0] = $tab_number[$i - 1][0];
		$toto[1] = $tab_number[$i][0];
		$toto[2] = $tab_number[$i + 1][0];
		$toto[3] = $i - 1;
	}
	$i++;
}

$equi = [-1, 0, 0];
$coef = ($tab_number[$toto[3] + 1][3] - $tab_number[$toto[3]][3]) / ($tab_number[$toto[3] + 1][0] - $tab_number[$toto[3]][0]);
$base = $tab_number[$toto[3]][3] - $coef * $tab_number[$toto[3]][0];
echo "\nSecond devirate estimated:\n";
$i = 0;
while ($toto[0] + $i <= $toto[1])
{
	if ($equi[0] == -1)
	{
	   $equi[1] = ($toto[0] + $i) * $coef + $base;
	   $equi[0] += 1;
	 }
	else if ($equi[0] == 0)
	{
		if ((($toto[0] + $i) * $coef + $base) * $equi[1] < 0)
		   {
			$equi[0] = 1;
			$equi[2] = $toto[0] + $i;
			if ((($toto[0] + $i + 0.05) * $coef + $base) * $equi[1] < 0)
				$equi[2] = $toto[0] + $i + 0.1;
				}
		$equi[1] = ($toto[0] + $i) * $coef + $base;
	}
	printf("volume: %g ml -> %.2f\n", $toto[0] + $i, ($toto[0] + $i) * $coef + $base);
	$i += 0.1;
}
$coef = ($tab_number[$toto[3] + 2][3] - $tab_number[$toto[3] + 1][3]) / ($tab_number[$toto[3] + 2][0] - $tab_number[$toto[3] + 1][0]);
$base = $tab_number[$toto[3] + 1][3] - $coef * $tab_number[$toto[3] + 1][0];
$i = 0.1;
while ($toto[1] + $i <= $toto[2])
{
	if ($equi[0] == -1)
	{
	   $equi[1] = ($toto[0] + $i) * $coef + $base;
	   $equi[0] += 1;
	 }
	else if ($equi[0] == 0)
	{
		if ((($toto[0] + $i) * $coef + $base) * $equi[1] < 0)
		   {
			$equi[0] = 1;
			$equi[2] = $toto[0] + $i;
			if ((($toto[0] + $i + 0.05) * $coef + $base) * $equi[1] < 0)
				$equi[2] = $toto[0] + $i + 0.1;
		}
		$equi[1] = ($toto[0] + $i) * $coef + $base;
	}
	printf("volume: %g ml -> %.2f\n", $toto[1] + $i, ($toto[1] + $i) * $coef + $base);
	$i += 0.1;
}
if ($equi[2] == 0)
	$equi[2] += 0.1;
printf("\nEquivalent point at %g ml\n", $equi[2] - 0.1);
